#!/usr/bin/env bash

# Copyright 2021 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

TOOLS=(
  kepctl
  # TODO(kepify): Remove once kepify is merged into kepctl
  kepify
)

setup_env() {
  echo "Setting up environment..."

  if [[ -z "${TOOL_BIN:-}" ]]; then
    if [ -n "${GOBIN:-}" ]; then
      TOOL_BIN="${GOBIN}"
    else
      TOOL_BIN="$(go env GOPATH)/bin"
    fi
    export TOOL_BIN
  fi

  export PATH="${PATH}:${TOOL_BIN}"
}

compile() {
  local tool="$1"

  echo "Compiling $tool..."

  go install "${tool}"
  echo "${tool} compiled & installed"
}

check_deps() {
  echo "Checking dependencies..."

  compile github.com/psampaz/go-mod-outdated

  local gmo_args=( '-update' '-direct' )
  if [ -n "${FAIL_ON_OUTDATED:-}" ]; then
    gmo_args+=( '-ci' )
  fi

  go list -u -m -json all | go-mod-outdated "${gmo_args[@]}"
}

compile_with_flags() {
  local git_tree_state
  local pkg
  local tool="$1"

  git_tree_state=dirty
  pkg=k8s.io/release/pkg/version

  if git_status=$(git status --porcelain --untracked=no 2>/dev/null) && [[ -z "${git_status}" ]]; then
    git_tree_state=clean
  fi

  go build -v -ldflags "-s -w \
    -X $pkg.buildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
    -X $pkg.gitCommit=$(git rev-parse HEAD 2>/dev/null || echo unknown) \
    -X $pkg.gitTreeState=$git_tree_state \
    -X $pkg.gitVersion=$(git describe --tags --abbrev=0 || echo unknown)" \
    -o "$TOOL_BIN/$tool" "./cmd/$tool" \
    || return 1

  echo "$tool was successfully compiled and installed to $TOOL_BIN/$tool"
}

main() {
  cd "$(dirname "${BASH_SOURCE[0]}")"

  setup_env
  check_deps

  if [ $# = 0 ]; then
    # default to all tools
    set -- "${TOOLS[@]}"
  fi

  for tool; do
    if ! (printf '%s\n' "${TOOLS[@]}" | grep -q "^${tool}$"); then
      echo "Skipping unrecognized tool name: ${tool}" >&2
      continue
    fi
    if [[ ${tool} =~ github.com\/ ]]; then
      compile "${tool}"
    else
      compile_with_flags "${tool}"
    fi
  done
}

main "$@"
